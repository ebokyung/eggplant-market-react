name: CI/CD
on:
  push:
    branches:
      # githubaction 브랜치에 코드가 푸시될 때 이 워크플로우를 실행
      - githubaction

jobs:
  run:
    # 빌드 운영체제(Mac OS, Window 등) 설정
    # 최신 Ubuntu 버전에서 실행
    runs-on: ubuntu-latest

    steps:
      # 아무것도 없는 OS에서 자동으로 우리 코드를 클론하고 다운받아 실행하게 해주는 소스코드
      - name: Checkout source code.
        uses: actions/checkout@v3

      # Node 버전 설정
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          # npm 명령어를 사용하여 종속성을 설치할 때, 이전에 캐시된 패키지를 사용하여 다운로드 및 설치 시간을 단축
          cache: 'npm'

      # 모듈 설치
      - name: Clean Install dependencies
        run: npm ci

      # 프로젝트 빌드
      - name: Build
        run: npm run build
        env:
          CI: false

      # AWS 자격증명 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # S3에 빌드 폴더 업로드
      - name: Deploy S3
        # aws s3 sync <source> <destination> [options]
        # 빌드된 폴더를 S3 버킷에 동기화
        # sync는 원본과 타깃 경로에 존재하는 파일의 차이를 비교하여 차이가 있는 파일만을 변경
        # --delete는 원본 경로에서 삭제되었을 경우 타깃 경로에서도 삭제
        # --acl은 업로드된 객체의 ACL(Access Control List)을 설정
        run: aws s3 sync ./build s3://${{ secrets.S3_BUCKET }}/  --delete --acl bucket-owner-full-control

      # CloudFront 캐시 무효화
      - name: Invalidate CloudFront Cache
        # aws cloudfront <command> [options]
        # CloudFront 배포의 캐시를 무효화하여 변경사항을 즉시 반영
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
